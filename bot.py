import os
from dotenv import load_dotenv
import telebot
from telebot import types
from docx import Document
from yandex_cloud_ml_sdk import YCloudML
import difflib
import re

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_CLOUD_FOLDER_ID = os.getenv("YANDEX_CLOUD_FOLDER_ID")
YANDEX_CLOUD_OAUTH_TOKEN = os.getenv("YANDEX_CLOUD_OAUTH_TOKEN")

ycloud = YCloudML(folder_id=YANDEX_CLOUD_FOLDER_ID, auth=YANDEX_CLOUD_OAUTH_TOKEN)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def load_document(filepath):
    doc = Document(filepath)
    return [paragraph.text.strip() for paragraph in doc.paragraphs if paragraph.text.strip()]


document_data = load_document("qa.docx")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def find_relevant_context(question, document, cutoff=0.5):
    matches = difflib.get_close_matches(question.lower(), [p.lower() for p in document], n=1, cutoff=cutoff)
    if matches:
        return next(p for p in document if p.lower() == matches[0])
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def is_technical_question(question, document):
    relevant_context = find_relevant_context(question, document, cutoff=0.3)
    if relevant_context:
        return True

    technical_keywords = [
        "IPMI", "BIOS", "RAID", "–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "—Å–µ—Ä–≤–µ—Ä", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "OC", "—Å–µ—Ç—å", "SSH", "–¥—Ä–∞–π–≤–µ—Ä", "API"
    ]
    for keyword in technical_keywords:
        if keyword.lower() in question.lower():
            return True
    return False


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT
def generate_answer_via_gpt(question):
    model = ycloud.models.completions("yandexgpt").configure(temperature=0.5)
    prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
    result = model.run(prompt)
    if result:
        return result[0].text.strip()
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."


# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
def escape_markdown(text):
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=["start", "restart"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    user_question = message.text

    if user_question in ["üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)"]:
        if user_question == "üõ† –°–ø—Ä–∞–≤–∫–∞":
            bot.send_message(chat_id, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        elif user_question == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.")
        elif user_question == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            bot.send_message(chat_id, "–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
        elif user_question == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)":
            bot.send_message(chat_id, "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
            start_message(message)
        return

    if not is_technical_question(user_question, document_data):
        bot.send_message(chat_id, "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
        return

    relevant_context = find_relevant_context(user_question, document_data)
    if relevant_context:
        formatted_message = (
            f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:**\n{escape_markdown(user_question)}\n\n"
            f"**–û—Ç–≤–µ—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:**\n{escape_markdown(relevant_context)}"
        )
        bot.send_message(chat_id, formatted_message, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
        gpt_answer = generate_answer_via_gpt(user_question)
        formatted_message = (
            f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:**\n{user_question}\n\n"
            f"**–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω:**\n{gpt_answer}"
        )
        bot.send_message(chat_id, formatted_message, parse_mode="Markdown")


if __name__ == "__main__":
    bot.polling()
