import os
import time
import threading
import requests.exceptions
import telebot
from telebot import types
from config import *
from utils import *

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
user_context = {}


def generation_answer_via_assistant(question):
    os_hint, device_hint = extract_filters(question)
    instructions = generate_instructions(os_hint, device_hint)

    previous_questions = thread.read()
    if previous_questions:
        prompt = f"{instructions}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {previous_questions}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"
    else:
        prompt = f"{instructions}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"

    thread.write(prompt)
    run = assistant.run(thread)
    result = run.wait()
    return result.text if result.text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."


def generation_answer_via_gpt(question):
    model = ycloud.models.completions("yandexgpt").configure(temperature=0.5)
    prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
    result = model.run(prompt)
    return result[0].text.strip() if result else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."


def ask_for_clarification(chat_id, question):
    os_hint, _ = extract_filters(question)
    if not os_hint:
        markup = types.InlineKeyboardMarkup()
        for os_name in OS_FILTERS:
            markup.add(types.InlineKeyboardButton(text=os_name, callback_data=f"os_{os_name}"))
        bot.send_message(chat_id, "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∫–∞–∫–æ–π –û–° –≤–∞–º –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:", reply_markup=markup)
        user_context[chat_id] = {"pending": question, "status": "waiting_os_selection"}
        return

    clarifying = generate_clarifying_question(question)
    if clarifying:
        bot.send_message(chat_id, clarifying)
        user_context[chat_id] = {"pending": question, "status": "waiting_dynamic_clarification"}
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")


def generate_clarifying_question(question):
    model = ycloud.models.completions("yandexgpt").configure(temperature=0.7)
    prompt = f"–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –Ω–µ—è—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\"{question}\"\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"
    result = model.run(prompt)
    return result[0].text.strip() if result else None


@bot.message_handler(commands=["start", "restart"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)")
    markup.add("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –í–∞–º –ø–æ–º–æ—á—å.",
        reply_markup=markup,
    )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    user_question = message.text

    if user_question in ["üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]:
        if user_question == "üõ† –°–ø—Ä–∞–≤–∫–∞":
            bot.send_message(chat_id, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        elif user_question == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.")
        elif user_question == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            bot.send_message(chat_id, "–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π.")
        elif user_question == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            bot.send_message(chat_id, "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: mtrx@ipdrom.ru.",
                             parse_mode="Markdown")
        elif user_question == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)":
            bot.send_message(chat_id, "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
            start_message(message)
        return

    last_question = user_context.get(chat_id)
    if isinstance(last_question, str) and user_question in SHORT_REPLIES:
        user_question = f"{last_question} ‚Üí {user_question}"
    else:
        user_context[chat_id] = user_question

    if not is_technical_question(normalize_question(user_question), last_question, TECHNICAL_KEYWORDS):
        ask_for_clarification(chat_id, user_question)
        return

    os_hint, _ = extract_filters(user_question)
    if not os_hint:
        ask_for_clarification(chat_id, user_question)
        return

    bot.send_message(chat_id, "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")

    assistant_answer = generation_answer_via_assistant(user_question)
    if assistant_answer:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥", callback_data=f"helpful_{message.message_id}"))
        markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{message.message_id}"))
        bot.send_message(chat_id,
                         f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {clean_markdown_output(user_question)}\n\n"
                         f"**–û—Ç–≤–µ—Ç:**\n{escape_markdown(assistant_answer)}",
                         parse_mode="MarkdownV2",
                         reply_markup=markup)
        return

    gpt_answer = generation_answer_via_gpt(user_question)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥", callback_data=f"helpful_{message.message_id}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{message.message_id}"))
    bot.send_message(chat_id,
                     f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {clean_markdown_output(user_question)}\n\n"
                     f"**–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Yandex GPT:**\n{escape_markdown(gpt_answer)}",
                     parse_mode="MarkdownV2",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data = call.data

    if data.startswith("os_"):
        os_choice = data.replace("os_", "")
        pending = user_context.get(chat_id, {}).get("pending")
        if pending:
            full_question = f"{pending} {os_choice}"
            bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫ –¥–ª—è: *{full_question}*", parse_mode="Markdown")
            assistant_answer = generation_answer_via_assistant(full_question)
            bot.send_message(chat_id, f"**–û—Ç–≤–µ—Ç:**\n{escape_markdown(assistant_answer)}", parse_mode="MarkdownV2")
            user_context[chat_id] = full_question

    elif data.startswith("helpful_") or data.startswith("not_helpful_"):
        message_id = call.message.message_id
        parts = call.message.text.split("\n\n")
        question = parts[0].replace("**–í–∞—à –≤–æ–ø—Ä–æ—Å:** ", "").strip()
        answer = parts[1].replace("**–û—Ç–≤–µ—Ç:**\n", "").strip()

        if data.startswith("helpful_"):
            bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
            log_feedback(question, answer, "–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥", STATISTICS_FILE)
        elif data.startswith("not_helpful_"):
            bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ü–æ–ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç.")
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
            log_feedback(question, answer, "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥", STATISTICS_FILE)
            user_context[chat_id] = question
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.")


def ping_telegram():
    while True:
        try:
            bot.get_me()
            print("‚úÖ API Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Telegram: {e}")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç


threading.Thread(target=ping_telegram, daemon=True).start()

if __name__ == "__main__":
    while True:
        try:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.infinity_polling(timeout=60, long_polling_timeout=30)
        except requests.exceptions.ReadTimeout:
            print("‚ö†Ô∏è ReadTimeout! Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è ConnectionError! –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
        except KeyboardInterrupt:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            bot.stop_polling()
            time.sleep(5)
            break
