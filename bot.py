import os
import re
import time
import datetime
import telebot
import difflib
import threading
import requests.exceptions
from telebot import types
from dotenv import load_dotenv
from difflib import SequenceMatcher
from yandex_cloud_ml_sdk import YCloudML

load_dotenv()

CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_CLOUD_FOLDER_ID = os.getenv("YANDEX_CLOUD_FOLDER_ID")
YANDEX_CLOUD_OAUTH_TOKEN = os.getenv("YANDEX_CLOUD_OAUTH_TOKEN")

ycloud = YCloudML(folder_id=YANDEX_CLOUD_FOLDER_ID, auth=YANDEX_CLOUD_OAUTH_TOKEN)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

start_time = datetime.datetime.now()


def get_uptime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ñ–æ—Ä–º–∞—Ç: –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã:–°–µ–∫—É–Ω–¥—ã)"""
    uptime = datetime.datetime.now() - start_time
    return str(uptime).split('.')[0]


def load_document(filepath):
    with open(filepath, "r", encoding="utf-8") as file:
        return file.read()


document_data = load_document("qa.md")


def is_technical_question(question):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç–µ–º–∞–º.
    """
    technical_keywords = [
        "IPMI", "BIOS", "RAID", "–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "—Å–µ—Ä–≤–µ—Ä", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "–û–°", "—Å–µ—Ç—å", "SSH", "–¥—Ä–∞–π–≤–µ—Ä", "API",
        "Windows", "Linux", "Ubuntu", "Debian", "Arch", "CentOS", "Fedora", "–≤–∏–Ω–¥–æ–≤—Å", "–≤–∏–Ω–¥—É", "–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞",
        "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ª–æ–≥–∏", "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", "VGA", "SSD", "HDD", "UEFI", "POST", "—Ä–∞–∑–≥–æ–Ω", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞",
        "–∂–µ–ª–µ–∑–æ", "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", "—á–∏–ø—Å–µ—Ç", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", "—Ä–µ–∂–∏–º", "–ø–æ—Ä—Ç",
        "–¥–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", "–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞", "—Ä–∞–∑–≥–æ–Ω", "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "—Å–∏—Å—Ç–µ–º–∞", "apt", "yum", "snap", "dpkg", "systemctl", "grub", "swap", "root", "boot", "sudo", "bash"
    ]

    for keyword in technical_keywords:
        if keyword.lower() in question.lower():
            print(f"[LOG] –í–æ–ø—Ä–æ—Å '{question}' –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô ‚úÖ")
            return True

    print(f"[LOG] –í–æ–ø—Ä–æ—Å '{question}' –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º ‚ùå")
    return False


def find_relevant_context(question, document, cutoff=0.4):
    """
    –ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
    """
    sections = re.split(r"\n# \d+\.", document)

    section_titles = []
    section_mapping = {}

    for section in sections:
        lines = section.strip().split("\n")
        if lines:
            title = lines[0]
            section_titles.append(title)
            section_mapping[title] = section

    # –ò—â–µ–º —Ç–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞
    best_matches = difflib.get_close_matches(question, section_titles, n=3, cutoff=cutoff)

    best_match = None
    best_score = 0

    for match in best_matches:
        score = SequenceMatcher(None, question.lower(), match.lower()).ratio()
        if score > best_score:
            best_score = score
            best_match = match

    print(f"[LOG] –í–æ–ø—Ä–æ—Å: {question} | –ù–∞–π–¥–µ–Ω: {best_match} | –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_score:.2f}")

    if best_score < 0.3:
        return None

    return section_mapping[best_match]


def generate_answer_via_gpt(question):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT
    """
    model = ycloud.models.completions("yandexgpt").configure(temperature=0.5)
    prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
    result = model.run(prompt)
    if result:
        return result[0].text.strip()
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."


# –û—á–∏—Å—Ç–∫–∞ Markdown
def clean_markdown_output(text):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã Markdown.
    """
    text = re.sub(r"^#+\s*", "**", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º `#` –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = re.sub(r"\\([.,()])", r"\1", text)  # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    text = re.sub(r"\\-", "-", text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª—ç—à–∏ –ø–µ—Ä–µ–¥ `-`, —á—Ç–æ–±—ã —Å–ø–∏—Å–∫–∏ –≤—ã–≥–ª—è–¥–µ–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    text = re.sub(r"\\\*", "*", text)  # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ `*`, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Markdown
    return text.strip()


# –ö–æ–º–∞–Ω–¥–∞ /uptime (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)
@bot.message_handler(commands=["uptime"])
def uptime_message(message):
    bot.send_message(message.chat.id, f"‚è≥ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {get_uptime()}")


def send_alive_message():
    """
    –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.
    """
    chat_id = CHAT_ID
    while True:
        time.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        bot.send_message(chat_id, f"‚úÖ –ë–æ—Ç –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚è≥ –ê–ø—Ç–∞–π–º: {get_uptime()}")


threading.Thread(target=send_alive_message, daemon=True).start()


# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /restart
@bot.message_handler(commands=["start", "restart"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    user_question = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if user_question in ["üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)"]:
        if user_question == "üõ† –°–ø—Ä–∞–≤–∫–∞":
            bot.send_message(chat_id, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        elif user_question == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.")
        elif user_question == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            bot.send_message(chat_id, "–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
        elif user_question == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)":
            bot.send_message(chat_id, "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
            start_message(message)
        return

    if not is_technical_question(user_question):
        bot.send_message(chat_id, "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
        return

    relevant_section = find_relevant_context(user_question, document_data)

    if relevant_section:
        bot.send_message(chat_id,
                         f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:**\n{clean_markdown_output(user_question)}\n\n"
                         f"**–û—Ç–≤–µ—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:**\n{clean_markdown_output(relevant_section)}",
                         parse_mode="Markdown")
    else:
        bot.send_message(chat_id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
        gpt_answer = generate_answer_via_gpt(user_question)
        bot.send_message(chat_id,
                         f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:**\n{clean_markdown_output(user_question)}\n\n"
                         f"**–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω:**\n{clean_markdown_output(gpt_answer)}",
                         parse_mode="Markdown")


def ping_telegram():
    """–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –±–æ—Ç –¥–µ–ª–∞–µ—Ç –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API Telegram, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å."""
    while True:
        try:
            bot.get_me()
            print("‚úÖ API Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Telegram: {e}")
        time.sleep(300)


threading.Thread(target=ping_telegram, daemon=True).start()
if __name__ == "__main__":
    while True:
        try:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            # bot.infinity_polling(timeout=30, long_polling_timeout=25)
            bot.infinity_polling(none_stop=True)
        except requests.exceptions.ReadTimeout:
            print("‚ö†Ô∏è ReadTimeout! Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
            time.sleep(5)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
        except KeyboardInterrupt:
            print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            bot.stop_polling()
            time.sleep(5)
            break
