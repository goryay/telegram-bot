import os
import time
import string
import telebot
import threading
import requests.exceptions
from telebot import types
from dotenv import load_dotenv
from yandex_cloud_ml_sdk import YCloudML

load_dotenv()

CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_CLOUD_FOLDER_ID = os.getenv("YANDEX_CLOUD_FOLDER_ID")
YANDEX_CLOUD_OAUTH_TOKEN = os.getenv("YANDEX_CLOUD_OAUTH_TOKEN")

ycloud = YCloudML(folder_id=YANDEX_CLOUD_FOLDER_ID, auth=YANDEX_CLOUD_OAUTH_TOKEN)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

file = ycloud.files.upload("qa.md", ttl_days=5, expiration_policy="static")

operation = ycloud.search_indexes.create_deferred([file])
search_index = operation.wait()

tool = ycloud.tools.search_index(search_index)
assistant = ycloud.assistants.create("yandexgpt", tools=[tool])
thread = ycloud.threads.create()

TECHNICAL_KEYWORDS = [
    "IPMI", "BIOS", "RAID", "–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "—Å–µ—Ä–≤–µ—Ä", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "–û–°", "—Å–µ—Ç—å", "SSH", "–¥—Ä–∞–π–≤–µ—Ä", "API",
    "Windows", "Linux", "Ubuntu", "Debian", "Arch", "CentOS", "Fedora", "–≤–∏–Ω–¥–æ–≤—Å", "–≤–∏–Ω–¥—É", "–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞",
    "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ª–æ–≥–∏", "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", "VGA", "SSD", "HDD", "UEFI", "POST", "—Ä–∞–∑–≥–æ–Ω",
    "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–∂–µ–ª–µ–∑–æ", "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", "—á–∏–ø—Å–µ—Ç", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", "—Ä–µ–∂–∏–º",
    "–ø–æ—Ä—Ç", "–¥–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", "–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞", "—Ä–∞–∑–≥–æ–Ω", "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
    "—Å–∏—Å—Ç–µ–º–∞", "apt", "yum", "snap", "dpkg", "systemctl", "grub", "swap", "root", "boot", "sudo", "bash",
    "Astra", "Astra Linux", "Clonezilla", "Supermicro", "IPDROM", "RAID-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "–≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä", "GPT",
    "PXE-–∑–∞–≥—Ä—É–∑–∫–∞", "KVM", "LiveCD", "—Ñ–ª–µ—à–∫–∞", "—Ñ–ª–µ—à–∫—É", "–∑–∞–≥—Ä—É–∑–æ—á–Ω–∞—è —Ñ–ª–µ—à–∫–∞", "USB", "–æ–±—Ä–∞–∑ —Å–∏—Å—Ç–µ–º—ã", "ISO",
    "–∑–∞–ø–∏—Å—å –æ–±—Ä–∞–∑–∞",
]

user_context = {}

SHORT_REPLIES = ["–Ω–µ –ø–æ–º–æ–≥–ª–æ", "—á—Ç–æ –¥–∞–ª—å—à–µ?", "–∫–∞–∫–∏–µ –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã?", "—ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                 "–¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏"]

STATISTICS_FILE = "feedback_statistics.txt"


def normalize_question(question):
    return question.translate(str.maketrans("", "", string.punctuation)).lower()


def is_technical_question(question, last_question=None):
    normalized_question = normalize_question(question)

    for keyword in TECHNICAL_KEYWORDS:
        if keyword.lower() in normalized_question or any(
                kw in normalized_question for kw in keyword.lower().split()
        ):
            print(f"[LOG] –í–æ–ø—Ä–æ—Å '{question}' –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô ‚úÖ (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword})")
            return True

    if last_question:
        normalized_last_question = normalize_question(last_question)
        common_words = set(normalized_question.split()) & set(normalized_last_question.split())
        similarity = len(common_words) / max(len(normalized_question.split()), 1)

        if similarity > 0.5:
            print(f"[LOG] '{question}' –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ '{last_question}', —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º ‚úÖ")
            return True

    print(f"[LOG] –í–æ–ø—Ä–æ—Å '{question}' –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º ‚ùå")
    return False


def generation_answer_via_assistant(question):
    """
    –ó–∞–ø—Ä–æ—Å –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ —Ñ–∞–π–ª–µ, –∞ –∑–∞—Ç–µ–º –≤ GPT.
    """
    previous_questions = thread.read()

    if previous_questions:
        prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {previous_questions}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"
    else:
        prompt = f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"

    thread.write(prompt)
    run = assistant.run(thread)
    result = run.wait()

    return result.text if result.text else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."


def generation_answer_via_gpt(question):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT (–µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ).
    """
    model = ycloud.models.completions("yandexgpt").configure(temperature=0.5)
    prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
    result = model.run(prompt)
    return result[0].text.strip() if result else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."


def clean_markdown_output(text):
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text).strip()


def escape_markdown(text):
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)


def log_feedback(question, answer, feedback):
    with open(STATISTICS_FILE, "a", encoding="utf-8") as file:
        file.write(f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n–û—Ç–∑—ã–≤: {feedback}\n{'-' * 40}\n")


# üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def safe_send_message(chat_id, text):
    try:
        escaped_text = escape_markdown(text)
        bot.send_message(chat_id, escaped_text, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@bot.message_handler(commands=["start", "restart"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)")
    markup.add("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –í–∞–º –ø–æ–º–æ—á—å.",
        reply_markup=markup,
    )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    user_question = message.text

    if user_question in ["üõ† –°–ø—Ä–∞–≤–∫–∞", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]:
        if user_question == "üõ† –°–ø—Ä–∞–≤–∫–∞":
            bot.send_message(chat_id, "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        elif user_question == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.")
        elif user_question == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            bot.send_message(chat_id, "–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π.")
        elif user_question == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            bot.send_message(chat_id, "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: mtrx@ipdrom.ru.",
                             parse_mode="Markdown")
        elif user_question == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (Reset)":
            bot.send_message(chat_id, "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
            start_message(message)
        return

    if chat_id in user_context and user_context[chat_id]:
        last_question = user_context[chat_id]

        if user_question in SHORT_REPLIES:
            print(f"[LOG] '{user_question}' –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ '{last_question}' ‚úÖ")
            user_question = f"{last_question} ‚Üí {user_question}"
        else:
            user_context[chat_id] = user_question
    else:
        user_context[chat_id] = user_question

    if not is_technical_question(normalize_question(user_question)):
        bot.send_message(chat_id, "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
        return

    bot.send_message(chat_id, "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")

    assistant_answer = generation_answer_via_assistant(user_question)

    if assistant_answer:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥", callback_data=f"helpful_{message.message_id}"))
        markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{message.message_id}"))

        bot.send_message(chat_id,
                         f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {clean_markdown_output(user_question)}\n\n"
                         f"**–û—Ç–≤–µ—Ç:**\n{clean_markdown_output(assistant_answer)}",
                         parse_mode="MarkdownV2",
                         reply_markup=markup)
    else:
        gpt_answer = generation_answer_via_gpt(user_question)
        if gpt_answer:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥", callback_data=f"helpful_{message.message_id}"))
            markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{message.message_id}"))

            bot.send_message(chat_id,
                             f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {clean_markdown_output(user_question)}\n\n"
                             f"**–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Yandex GPT:**\n{clean_markdown_output(gpt_answer)}",
                             parse_mode="MarkdownV2",
                             reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    question = call.message.text.split("\n\n")[0].replace("**–í–∞—à –≤–æ–ø—Ä–æ—Å:** ", "")
    answer = call.message.text.split("\n\n")[1].replace("**–û—Ç–≤–µ—Ç:**\n", "")

    if data.startswith("helpful_"):
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        log_feedback(question, answer, "–û—Ç–≤–µ—Ç –ø–æ–º–æ–≥")
    elif data.startswith("not_helpful_"):
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ü–æ–ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        log_feedback(question, answer, "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–º–æ–≥")
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∏–Ω–≥–∞ Telegram API
def ping_telegram():
    while True:
        try:
            bot.get_me()
            print("‚úÖ API Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Telegram: {e}")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
threading.Thread(target=ping_telegram, daemon=True).start()

if __name__ == "__main__":
    while True:
        try:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.infinity_polling(timeout=60, long_polling_timeout=30)
        except requests.exceptions.ReadTimeout:
            print("‚ö†Ô∏è ReadTimeout! Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è ConnectionError! –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
        except KeyboardInterrupt:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            bot.stop_polling()
            time.sleep(5)
            break
